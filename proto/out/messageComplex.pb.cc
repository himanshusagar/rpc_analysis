// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageComplex.proto

#include "messageComplex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr MessageComplex::MessageComplex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valuestring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , valuedouble_(0)
  , valueint_(0){}
struct MessageComplexDefaultTypeInternal {
  constexpr MessageComplexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageComplexDefaultTypeInternal() {}
  union {
    MessageComplex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageComplexDefaultTypeInternal _MessageComplex_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messageComplex_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messageComplex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messageComplex_2eproto = nullptr;

const uint32_t TableStruct_messageComplex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::MessageComplex, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MessageComplex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageComplex, valueint_),
  PROTOBUF_FIELD_OFFSET(::MessageComplex, valuedouble_),
  PROTOBUF_FIELD_OFFSET(::MessageComplex, valuestring_),
  2,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::MessageComplex)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageComplex_default_instance_),
};

const char descriptor_table_protodef_messageComplex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024messageComplex.proto\"L\n\016MessageComplex"
  "\022\020\n\010valueInt\030\001 \002(\005\022\023\n\013valueDouble\030\002 \002(\001\022"
  "\023\n\013valueString\030\003 \002(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messageComplex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messageComplex_2eproto = {
  false, false, 100, descriptor_table_protodef_messageComplex_2eproto, "messageComplex.proto", 
  &descriptor_table_messageComplex_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_messageComplex_2eproto::offsets,
  file_level_metadata_messageComplex_2eproto, file_level_enum_descriptors_messageComplex_2eproto, file_level_service_descriptors_messageComplex_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messageComplex_2eproto_getter() {
  return &descriptor_table_messageComplex_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messageComplex_2eproto(&descriptor_table_messageComplex_2eproto);

// ===================================================================

class MessageComplex::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageComplex>()._has_bits_);
  static void set_has_valueint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_valuedouble(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valuestring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

MessageComplex::MessageComplex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MessageComplex)
}
MessageComplex::MessageComplex(const MessageComplex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valuestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_valuestring()) {
    valuestring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_valuestring(), 
      GetArenaForAllocation());
  }
  ::memcpy(&valuedouble_, &from.valuedouble_,
    static_cast<size_t>(reinterpret_cast<char*>(&valueint_) -
    reinterpret_cast<char*>(&valuedouble_)) + sizeof(valueint_));
  // @@protoc_insertion_point(copy_constructor:MessageComplex)
}

inline void MessageComplex::SharedCtor() {
valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valuestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&valuedouble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valueint_) -
    reinterpret_cast<char*>(&valuedouble_)) + sizeof(valueint_));
}

MessageComplex::~MessageComplex() {
  // @@protoc_insertion_point(destructor:MessageComplex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageComplex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  valuestring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageComplex::ArenaDtor(void* object) {
  MessageComplex* _this = reinterpret_cast< MessageComplex* >(object);
  (void)_this;
}
void MessageComplex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageComplex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageComplex::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageComplex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    valuestring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&valuedouble_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valueint_) -
        reinterpret_cast<char*>(&valuedouble_)) + sizeof(valueint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageComplex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 valueInt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_valueint(&has_bits);
          valueint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double valueDouble = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_valuedouble(&has_bits);
          valuedouble_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required string valueString = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_valuestring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageComplex.valueString");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageComplex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageComplex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 valueInt = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_valueint(), target);
  }

  // required double valueDouble = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_valuedouble(), target);
  }

  // required string valueString = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_valuestring().data(), static_cast<int>(this->_internal_valuestring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "MessageComplex.valueString");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_valuestring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageComplex)
  return target;
}

size_t MessageComplex::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MessageComplex)
  size_t total_size = 0;

  if (_internal_has_valuestring()) {
    // required string valueString = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuestring());
  }

  if (_internal_has_valuedouble()) {
    // required double valueDouble = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_valueint()) {
    // required int32 valueInt = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_valueint());
  }

  return total_size;
}
size_t MessageComplex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageComplex)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string valueString = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuestring());

    // required double valueDouble = 2;
    total_size += 1 + 8;

    // required int32 valueInt = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_valueint());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageComplex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageComplex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageComplex::GetClassData() const { return &_class_data_; }

void MessageComplex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageComplex *>(to)->MergeFrom(
      static_cast<const MessageComplex &>(from));
}


void MessageComplex::MergeFrom(const MessageComplex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageComplex)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_valuestring(from._internal_valuestring());
    }
    if (cached_has_bits & 0x00000002u) {
      valuedouble_ = from.valuedouble_;
    }
    if (cached_has_bits & 0x00000004u) {
      valueint_ = from.valueint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageComplex::CopyFrom(const MessageComplex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageComplex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageComplex::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MessageComplex::InternalSwap(MessageComplex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &valuestring_, lhs_arena,
      &other->valuestring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageComplex, valueint_)
      + sizeof(MessageComplex::valueint_)
      - PROTOBUF_FIELD_OFFSET(MessageComplex, valuedouble_)>(
          reinterpret_cast<char*>(&valuedouble_),
          reinterpret_cast<char*>(&other->valuedouble_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageComplex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messageComplex_2eproto_getter, &descriptor_table_messageComplex_2eproto_once,
      file_level_metadata_messageComplex_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MessageComplex* Arena::CreateMaybeMessage< ::MessageComplex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageComplex >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
